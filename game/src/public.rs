// Public types that are used in the game, needed by client
// And generated by ts-rs

use serde::{Deserialize, Serialize};
use std::num::NonZeroU64;
use ts_rs::TS;

#[derive(TS, Debug, Clone, Copy, Serialize, Deserialize)]
#[ts(export)]
pub struct Velocity {
    pub dx: f32,
    pub dy: f32,
}

// Position component
#[derive(TS, Debug, Clone, Copy, Serialize, Deserialize)]
#[ts(export)]
pub struct Position {
    pub x: f32,
    pub y: f32,
}

// Team component
#[derive(TS, Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[ts(export)]
pub enum Team {
    Red,
    Blue,
}

// Player component
#[derive(TS, Debug, Clone, Serialize, Deserialize)]
#[ts(export)]
pub struct Metadata {
    pub name: String,
}

pub type EntityBits = NonZeroU64;

// Flag component
#[derive(TS, Debug, Clone, Serialize, Deserialize)]
#[ts(export)]
pub struct Item {
    pub held_by: Option<EntityBits>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Input {
    PlayerMove {
        player_id: EntityBits,
        velocity: Velocity,
    },
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Player {
    pub metadata: Metadata,
    pub position: Position,
    pub velocity: Velocity,
    pub team: Team,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Flag {
    pub position: Position,
    pub team: Team,
    pub item: Item,
}

// All the data that needs to be sent to the client to render the game
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Snapshot {
    pub players: Vec<Player>,
    pub flags: Vec<Flag>,
}
